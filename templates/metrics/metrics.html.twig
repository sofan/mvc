{% extends 'base.html.twig' %}

{% block title %}Metrics{% endblock %}

{% block main %}

<div class="metrics">

    <h2>Introduktion</h2>

    <ul>
        <li>Codestyle</li>
        <p>Koden ska vara lätt att förstå och underhålla. Den ska vara enhetligt formaterad och tydliga namn ska användas för variabler.</p>
        <li>Coverage</li><p>Anger hur stor del av koden som täcks av tester.
        <li>Complexity</li><p>Mäter hur komplex koden är. En låg komplexitet är att föredra då det ger kod som är lättare att förstå och underhålla.</p>
        <li>Cohesion</li><p>Anger hur väl olika delar av koögre den hänger samman. En hög cohesion är att föredra då det innebär att varje klass har ett avgränsat ansvarsområde.
        Önskat värde på cohesion är 1, vilket tyder på att allt som finns i klassen hänger ihop. Ett högre värde på cohesion innebär att klassen har
        för många ansvarsområden vilket inte är önskvärt.
        </p>
        <li>Coupling</li><p>Anger hur beroende klasserna är av varandra. En låg coupling är att föredra då klasserna är mer fristående och lättare att underhålla, t.ex. vid buggrättning.</p>
        <li>CRAP</li><p>Ett mått på kodkvalitet baserat på komplexitet och coverage. Hög komplexitet och låg coverage ger ett högt CRAP-värde, vilket indikerar att koden kan vara svår att underhålla.</p>

    </ul>

    <h2>Phpmetrics</h2>

    <ul>
    <li>Bubbles
    </li>
    <p>Den visuella översikten av den första analysen visar på att jag har några Controller klasser som är röda, dvs de har högt Maintainability index.
    Jag kan också se att där finns en stor gul bubbla (vilken representerar klassen Game) vilket tyder på hög Cyclomatic Complexity.</p>
    <p><img src="{{ asset('img/phpmetrics_bubbles.png') }}" height="150" alt="phpmetrics" title="phpmetrics"></p>
    <li>Violations</li>
    Här får jag 2 errors, varav båda på Controllers och handlar om Single responsibility principle.
    <p><img src="{{ asset('img/metrics_violations.png') }}" width="100%" alt="violations" title="violations"></p>

    <li>Kodtäckning</li>
    Jag kan se att 13 av mina klasser ej är testade. Nästan alla dessa är Controllers vilka jag är medveten om att jag inte har tester för.
    Jag kan dessutom se högt Cyclomatic värde för CardControllerJson och DiceGameController, vilket innebär att koden är komplex. Dessa har även en större risk för buggar.

    <li>Komplexitet</li>De klasser som får högts komplexitet är Controllers.<br>Medelvärden för alla klasser:
    <p class="bold">Average weighted method count by class (CC): 6.96</p>
    <p class="bold">Average cyclomatic complexity by class: 3.29</p>
    <p class="bold">Average relative System complexity: 86.18</p>
    <p class="bold">Average bugs by class(Halstead): 0.13</p>
    <p class="bold">Average defects by class (Kan): 0.38</p>
    <br>
    Positivt att utläsa från detta är att min kod är relativt fri från buggar och skapligt stabil. <br>
    Negativt är att mina klasser har ett ganska högt antal metoder och den relativa kodkomplexiteten är hög med många interaktioner
    mellan klasser, vilket kan göra koden komplex och svårare att underhålla.


    <li>Volym</li>Även här ligger Controllers i topp och har störst volym med kod. Jag kan också utläsa att koden har ganska hög andel kommentarer.

    <li>Coupling</li>Den klass som används mest av andra klasser är Card, vilket inte var helt oväntat.
    De klasser som har flest utgående kopplingar till andra klasser är inte oväntat alla Controllers, med CardControllerJson i topp. Jag kan
    se att dessa klasser på grund av deras beroende av andra klasser har en hög instabilitet.
    </ul>

    <h3>Svagheter</h3>

    Controllers har ofta hög komplexitet. Dessa skulle eventuellt kunna delas upp i mindre för att.<br>
    Det finns brist på enhetstester för Controllers vilket ökar risken för oupptäckta buggar.<br>
    Två kontrollers brister i Single Responslbility Principle och har för många ansvardsområden.



    <h2>Scrutinizer</h2>
    Då den första rapporten var gjord fick jag följande översiktsbild. Ett resultat på 9.97 ser vid första anblick ut som ett bra resultat.
    Jag kan samtidigt se att kodtäckning endast är 31% vilket känns lågt (badgen nedan missade jag först att kopiera, därav texten 38%).

    <p>
    <a href="https://scrutinizer-ci.com/g/sofan/mvc/?branch=main" target="blank"><img src="https://scrutinizer-ci.com/g/sofan/mvc/badges/quality-score.png?b=main" alt="badge" title="badge">
    <img src="https://scrutinizer-ci.com/g/sofan/mvc/badges/build.png?b=main" alt="badge" title="badge">
    <img src="https://scrutinizer-ci.com/g/sofan/mvc/badges/coverage.png?b=main" alt="badge" title="badge">
    </a>
    </p>

    <ul>
        <li>Issues</li>
        Av de issues som visas tar jag endast hänsyn till de som tillhör min kod. Jag ignorerar därför t.ex. php-cs.fixer och tänker förska filtrera bort den
        vid nästa uppdatering av koden. Det är också där som major issues finns.
        Issues på mina klasser CardHand och DeckOfCards är av klass minor och unknown och beror bland annat på bristfällig dokumentation och felaktig logik.
        <p><img src="{{ asset('img/scr_issues_1.png') }}" alt="Scrutinizer issues" title="Scrutinizer issues"></p>
        Issues i klassen Game, där jag gör en felaktig jämförelse som alltid blir false:<br>
        <p><img src="{{ asset('img/scr_issues_2.png') }}" alt="Scrutinizer issues 2" title="Scrutinizer issues 2"></p>

        <li>Komplexitet</li>
        Enligt Scrutinizer har klassen Game högst komplexitet med ett värde på 27. Klassen ser trots det ut fått godkänt.
        <p><img src="{{ asset('img/scr_game_complexity.png') }}" alt="Game class complexity" title="Game class complexity"></p>
        Vad gäller komplexitet för funktioner så har Game::checkResult() sämst betyg, och det är också den enda funktion som har fått ett B i betyg (övriga har A).
        <p><img src="{{ asset('img/scr_oper_complexity.png') }}" alt="checkResult complexity" title="checkResult complexity"></p>

        <li>Kodtäckning</li>
        Precis som i phpmetrics kan jag se att Controllers är de som till största del saknar enhetstester. Nästan alla övriga klasser har 100% kodtäckning.

        <li>CRAP</li>
        Högsta CRAP som fås är 12, vilket gäller 5 funktioner. Detta anses ändå av Scrutinizer som godkänt. Kanske kan jag minska CRAP-värdet genom att lägga till
        fler enhetstester för dessa funktioner.
        Tittar jag på listan över de minst testade funktionerna ser jag också ett samma funktioner återkommer där.
        <p><img src="{{ asset('img/scr_least_tested.png') }}" alt="Least tested functions" title="Least tested functions"></p>

    </ul>

    <h3>Svagheter</h3>
    Det finns issues i koden som behöver rättas till både vad gäller logik och dokumentation. Kodtäckningen är dålig för controllers, där finns förbättringspotential.
    De funktioner med högt CRAP värde kan behöva fler enhetstester.


    <h2>Förbättringar</h2>
    <ul>
    <li>Issues</li>
    Jag vill rätta till de issues som hittats av Scrutinizer.
    <li>Komplexitet och Cohesion</li>
    Vissa Controller klasser visar brister i Single responsibility principle. Dessa bör fixas så de inte hanterar fler
    ansvarsområden. Jag planerar att dela upp dessa controllers i fler klasser då de idag både används för att visa templates och för att generera Json till API.
    <li>Kodtäckning och CRAP</li>
    De klasser som har sämst kodtäckning är Controllers. Jag tänker försöka komplettera med fler tester för dessa.
    Däremot vill jag gärna att de funktioner med högt CRAP värde ska testas bättre så att betyget blir bättre.

    </ul>

    <h3>Analys efter genomförande</h3>
    <ul>
        <li>Komplexitet och Cohesion</li>
        Genom att dela upp Controllers i mindre klasser försvann felet med Single Responslbility i phpmtrics.
        Functionen Game::checkResult ansågs komplex. Jag delade därför upp den i flera separate funktioner vilket gav en mindre komplexitet.
        I samband med detta såg jag även nytta av mina enhetstester som hitta fel som jag gjorde.
        <li>CRAP</li>
        Jag fick högt CRAP värde på CardControllerJson. För att minska detta lyfta jag ut hjälpfunktionen createDeckOfCards till en egen Service klass.

        <li>CardHand</li>
        Documentation
    </ul>


    <h2>Diskussion</h2>
    Phpmetrics och Scrutinizer är båda väldigt bra verktyg för att hitta brister i koden.
    Jag tycker dock att det är svårt att veta exakt vad som menas. Framförallt i phpmetrics får man ofta gissa sig till vilken funktion som
    behöver åtgärdas. Scrutinizer ger en tydligare rapport.




</div>
{% endblock %}
