{% extends "base.html.twig" %}

{% block title %}Rapport{% endblock %}

{% block main %}
<h1>Rapport</h1>
<div class="content col2 aside">
    <div>
    <article id="kmom01" class="report">
        <h2>Kursmoment 1 - Bygg en me-sida</h2>
        <div>
            <p>
                Att komma igång med objektorientring i PHP känns kul. Jag är bekant med det till viss del sedan tidigare då jag för länge sedan läst kurser
                i C++ och Java, samt även stött på det till viss del i Python och Javascript.
                För att komma igång med objektorientering är det viktigt att första hur en klass består av medlemsvariabler och funktioner, och att man sedan skapar
                objekt (instanser) av denna klass. Medlemsvariablerna kan vara antingen privata eller publika, vilket styr hur de kan kommas åt utifrån.
            </p>
            <p>
                Kodbasen i uppgiften me/report kändes först stor och lite svåratt sätta sig in i. Men efter genomgången av kursmomenten blev det
                mer självklart hur koden delas upp i controllers och templates, samt hur koden sedan hamnar i build. Jag valde att använda SASS för
                stilen på sidan.
            </p>
            <p>
                Artikeln "PHP the right way" var en inehållsrik och lättskriven artikel. Intressant just nu var att läsa om Coding Practise
                och The Basics om hur koden skrivs på bästa sätt. Även avsnittet om databaser är intressant och jag ser fram emot att lära mig mer där i senare kursmoment.

            </p>
            <p>
                Min TIL detta kursmoment är att jag lyckades komma igång med Symfony och förstå dess struktur,
                utan några större problem med installation. Kul också att använda GitHub igen.
            </p>
        </div>
    </article>


    <article id="kmom02" class="report">
        <h2>Kursmoment 2 - Objektorientering</h2>
        <div>
            <p>
                <b>Arv</b> - Tillåter att en klass ärver egenskaper från en annan klass, genom att använda nyckelorder 'extends'.<br>
                <b>Komposition</b> - innebär att en klass har ett eller flera objekt av en annan klass som medlemmar.<br>
                <b>Interface</b> - är samling abstrakta metoder som en klass måste implementera. Det definierar ett kontrakt som klasserna att följa.<br>
                <b>Trait</b> - är en återanvändbar grupp av metoder som kan användas i flera klasser. Det tillåter återanvändning av kod utan att behöva använda arv.<br>
            </p>
            <p>
                Min implementation av kmom02 liknar till största del det vi lärt oss i övningen med Dice som jag tycker var tydlig och bra.
                Jag tycker att det var ganska rakt på sak att implemetera klasserna samt de controllers som används för att visas i twig templates. Däremot bler det
                krångligare att tänka hur POST routes skulle implemeteras till JSON API. Jag byggde det som små formulär på api-sidan som anropar POST routes, som sen i sin tur
                gör en redirect till GET routes som skriver ut JSON. Det svåraste var att få med de fall när parametrar ska skickas in i funktionen, och jag hoppas min lösning med att
                anropa path tillsammans med parametrar var korrekt.
                <br>
                Jag har även gjort de optionella uppgifterna med CardHand. Denna lagrade jag inte i sessionen då uppgiften inte sa att så skulle göras.
            </p>
            <p>
                Att jobba i Symfony med MVC känns alltmer bekvämt och jag gillar sättet hur man strukturerar upp koden i modeller, kontroller och vyer. Ibland kan det vara lite svårt att avgöra
                var logiken ska hamna, i en klass eller controller.
                Jag gillar också hur man kan återanvända vyer med include. Till exempel använde jag i  min implemetation en vy showCards.twig.html för att
                visa korten på de olika sidorna för att slippa dupblicera den koden.
            </p>
            <p>
                TIL detta kursmoment är att kunna använda routes för både POST och GET.
            </p>
        </div>
    </article>


    <article id="kmom03">
        <h2>Kursmoment 3 - </h2>
        <div>
            Innehåll kommer...
        </div>
    </article>
    </div>
    <div>
        <ul class="linkstyle">
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
        </ul>
    </div>
</div>

{% endblock %}