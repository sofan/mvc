{% extends "base.html.twig" %}

{% block title %}Rapport{% endblock %}

{% block main %}
<h1>Rapport</h1>
<div class="content col2 aside">
    <div>
    <article id="kmom01" class="report">
        <h2>Kursmoment 1 - Bygg en me-sida</h2>
        <div>
            <p>
                Att komma igång med objektorientring i PHP känns kul. Jag är bekant med det till viss del sedan tidigare då jag för länge sedan läst kurser
                i C++ och Java, samt även stött på det till viss del i Python och Javascript.
                För att komma igång med objektorientering är det viktigt att första hur en klass består av medlemsvariabler och funktioner, och att man sedan skapar
                objekt (instanser) av denna klass. Medlemsvariablerna kan vara antingen privata eller publika, vilket styr hur de kan kommas åt utifrån.
            </p>
            <p>
                Kodbasen i uppgiften me/report kändes först stor och lite svåratt sätta sig in i. Men efter genomgången av kursmomenten blev det
                mer självklart hur koden delas upp i controllers och templates, samt hur koden sedan hamnar i build. Jag valde att använda SASS för
                stilen på sidan.
            </p>
            <p>
                Artikeln "PHP the right way" var en inehållsrik och lättskriven artikel. Intressant just nu var att läsa om Coding Practise
                och The Basics om hur koden skrivs på bästa sätt. Även avsnittet om databaser är intressant och jag ser fram emot att lära mig mer där i senare kursmoment.

            </p>
            <p>
                Min TIL detta kursmoment är att jag lyckades komma igång med Symfony och förstå dess struktur,
                utan några större problem med installation. Kul också att använda GitHub igen.
            </p>
        </div>
    </article>


    <article id="kmom02" class="report">
        <h2>Kursmoment 2 - Objektorientering</h2>
        <div>
            <p>
                <b>Arv</b> - Tillåter att en klass ärver egenskaper från en annan klass, genom att använda nyckelorder 'extends'.<br>
                <b>Komposition</b> - innebär att en klass har ett eller flera objekt av en annan klass som medlemmar.<br>
                <b>Interface</b> - är samling abstrakta metoder som en klass måste implementera. Det definierar ett kontrakt som klasserna att följa.<br>
                <b>Trait</b> - är en återanvändbar grupp av metoder som kan användas i flera klasser. Det tillåter återanvändning av kod utan att behöva använda arv.<br>
            </p>
            <p>
                Min implementation av kmom02 liknar till största del det vi lärt oss i övningen med Dice som jag tycker var tydlig och bra.
                Jag tycker att det var ganska rakt på sak att implemetera klasserna samt de controllers som används för att visas i twig templates. Däremot bler det
                krångligare att tänka hur POST routes skulle implemeteras till JSON API. Jag byggde det som små formulär på api-sidan som anropar POST routes, som sen i sin tur
                gör en redirect till GET routes som skriver ut JSON. Det svåraste var att få med de fall när parametrar ska skickas in i funktionen, och jag hoppas min lösning med att
                anropa path tillsammans med parametrar var korrekt.
                <br>
                Jag har även gjort de optionella uppgifterna med CardHand. Denna lagrade jag inte i sessionen då uppgiften inte sa att så skulle göras.
            </p>
            <p>
                Att jobba i Symfony med MVC känns alltmer bekvämt och jag gillar sättet hur man strukturerar upp koden i modeller, kontroller och vyer. Ibland kan det vara lite svårt att avgöra
                var logiken ska hamna, i en klass eller controller.
                Jag gillar också hur man kan återanvända vyer med include. Till exempel använde jag i  min implemetation en vy showCards.twig.html för att
                visa korten på de olika sidorna för att slippa dupblicera den koden.
            </p>
            <p>
                TIL detta kursmoment är att kunna använda routes för både POST och GET.
            </p>
        </div>
    </article>


    <article id="kmom03" class="report">
        <h2>Kursmoment 3 - Kortspel</h2>
        <div>
            <p>
                Att inleda uppgiften med att skriva pseudokod trodde jag skulle bli jobbigt men visade sig vara jättebra och till och med kul.
                Det gav mig tid att tänka igenom hur jag sedan skulle implementera koden. Jag kunde sedan gå tillbaka till denna för
                att påminnas om hur jag hade tänkt.
            </p>
            <p>
                Jag utgick från de klasser jag skapat i kmom02, men lade till klasserna Player, Dealer och Game. Dealer ärver från Player (då de båda
                är spelare) men har även funktioner för att kolla när den ska stanna. Klassen Game tar hand om all spellogik och är den klass som
                initierar spelarna och kortleken som används. Den controller som används behöver därför endast hantera klassen Game.
                Jag har försökt att ha så lite kod som möjligt i controllern och tycker att jag lyckats skapligt bra med det.</p>
                <p>Jag valde också att göra den valfria uppgiften som ger spelaren möjlighet att satsa pengar. Den summa som spelaren har lade jag till
                som en medlemsvariabel i klassen Player. Kanske hade det varit bättre att hantera den utanför klassen, kanske i en annan klass som hanterar
                ställningen, eller i sessionen.
            </p>
            <p>
                Jag tycker fortfarande att Symfony är trevligt att använda. Dokumentationen kan vara lite svår att hitta i, men i stort så gillar jag det.

            </p>
            <p>
                TIL detta kursmoment är det jag lärt mig genom att använda linters. Jag gillade artikeln "Clean Code PHP" och ser att det finns massor
                att lära sig där. Jag gillar att hitta smartare sätt att skriva koden på.
            </p>
        </div>
    </article>

     <article id="kmom04" class="report">
        <h2>Kursmoment 4 - Enhetstestning</h2>
        <div>
            <p>
                Att skriva tester känns alltid lite jobbigt och krångligt innan man kommer igång. Men phpunit påminnde mycket om hur vi tidigare
                gjorde enhetstester i Python, så jag tyckte det gick bra att komma igång då jag kände igen mig.
                Jag lyckades för mina klasser få 100% kodtäckning. När det kom till test av controllers blev det svårare. Jag kunde med assert testa min
                GameControllerJSon som genererar JSON till api. Men den andra GameController blev svårare. Jag hittade i Symfonys dokumentation att jag kunde
                använda WebTestCase, men nöjde mig med att testa endast två av funktionerna, de enklaste, där jag kunde kontrollera att en viss text finns i responsen.
            </p>
            <p>
                Jag var glad i detta kursmoment att jag i de tidigare kmom hade strukturerat funktionerna i klasserna som jag gjort. Jag upplever att
                min kod var skapligt lätt att testa då jag har nästan all kod i klasserna och väldigt lite kod i controllerna.
                Det enda stället där jag ändrat i koden är för DeckOfCards. Tidigare lät jag den klassen själv fylla på kortleken, men jag ändrade nu så att
                den injektas utifrån. Klassen uppfyller då bättre Single Responsibility principen och är lättare att testa.
                Jag tycker nog att kod som är lätt att testa kan anses som ren och kanske också snygg.
            </p>
            <p>

                Min TIL detta kursmoment var hur viktigt det är att skiva enkel och tydlig kod, och gärna dela upp det i många mindre funktioner, så att en jag själv eller en annan utvecklare
                vid senare tillfälle kan komma tillbaka och förstå vad den gör.
            </p>

        </div>


        <article id="kmom05" class="report">
        <h2>Kursmoment 5 - ORM / Databas</h2>
        <div>
            <p>
                Övningen med Symfony och Doctrine gick bra. Genom att följa instruktionen samtidig som jag tittar på den inspelade
                lektionen är det lätt att hänga med i vad som gjordes. Att skapa en databas samt tabeller var oväntat smidigt. Man får väldigt mycket gratis via
                de kommandon som körs i terminalen.
            </p>
            <p>
                När jag skapade applikationen i uppgiften började jag först med att generera JSON, för att se att det fungerade.
                Därefter gick jag över till att skapa gränssnittet för att lägga till, editera och radera böcker. Jag försökte göra ett användarvänligt gränssnitt
                där det alltid är lätt att gå tillbaka till startsidan med listan av böcker.
            </p>
            <p>
                Att använda ORM och arbeta med databasens tabeller som objekt tycker jag var smidigt. Dokumentationen är bra och jag lärde mig bland annat
                att jag kan använda EntityValueResolver för att direkt hämta ett objekt via dess id, och slipper då onödig kod med BookRepository för att söka efter boken via ID.
                ORM skiljer sig från hur vi arbetade med databaser i Javascript där man var tvungen att ha mer koll på hur SQL kod skrivs, vilket jag kan uppskatta
                till viss del då man har bra kontroll på vad som sker. Men jag förstår också fördelen med ORM där man mer kan tänka i objekt och klasser.
            </p>
            <p>
                Min TIL detta kmom var hur enkelt det var att med Doctrine och kommandon i terminalen att skapa en databas med tabeller.
                Man fick väldigt mycket automatgenererat vilket underlättade.
            </p>
        </div>

        <article id="kmom06" class="report">
        <h2>Kursmoment 6 - Automatiserad test</h2>
        <p>
            Att komma igång med Phpmetrics var lätt. Att sen analysera resultatet var desto svårare. Det är enormt många mätvärden att grotta ner sig i, och
            det är svårt att veta var man ska börja för att förbättra resultatet. Jag gillade den översiktliga vyn, men saknade att det inte går att se vilka funktioner
            som ingår i klasserna och var förbättring behövs.
        </p>
        <p>
            Att integrera Scrutinizer var först lite problematiskt, jag tror att jag hade fel konfiguration. Men efter lite uppdateringar av dbwebb och
            i min kod så fungerade det bra. Jag gillade översikten i Scrutinizer bätter än Phpmetrics, då det på ett tydligare sätt presenterades vad i koden som brister.
            Vid första bygget var min kodtäkning 31% och kodkvaliteten 9.97.
            Efter förbättringar av koden steg kodtäckning till 66% och kvarlitet till 10.
            Att kunna visualisera detta med badges är smidigt och tydligt och ger användaren en bra bild om hur väl koden är byggd.

        </p>
        <p>
            Efter detta kursmoment ser jag ännu mer nyttan med kodkvalitet. Om man redan från början är medveten om detta så skrivs bättre kod som kan underhållas och
            förstås av andra än en själv. Jag inser nyttan med att redan från start skriva tester för en bra kodtäckning samt tänka på Single Responsibility för de olika klasserna.
            Det kan annars ta orimligt lång tid att rätta upp allt i efterhand, och risken finns att man då slarvar bara för att få fina testresultat.
            Jag tror absolut att badges kan användas för att påvisa kodkvalitet. Det ger en snabb överblick över projektets hälsa vilket är användbart för
            både andra utvecklare och användare som överväger att använda koden.
        </p>
        <p>
        TIL detta kmom är att man alltid ska ha enhetstester i tanken redan från början. Samt att det finns väldigt bra verktyg för att kontrollera om
        du har tydlig och lättunderhållen kod.
        </p>


        </article>

        <article id="kmom10" class="report">
        <h2>Kursmoment 07/10 - Project och examination</h2>
        <p>
        Jag har valt till detta projekt att utveckla kortspelet <b>Poker Square</b>. Dels på grund av att jag kan använda en hel del av de klasser vi redan
        implemeterat under kursens gång, och för att jag som icke van pokerspelare tycker att reglerna för en patiens är lättare att förstå.
        På grund av viss tidsbrist så har jag valt att fokusera på de obligatoriska kraven. Utöver det har jag även gjort API-kravet.

        <h3>Krav 1-3</h3>
        Jag har skapat en ny landningsida <code>/proj</code> med en egen stilmall. Det går att komma till projekt-sidan från navbaren på min report-sida.
        I navbaren till sidan går att komma till startsidan för spelet, about-sidan <code>proj/about</code> och API-sidan <code>proj/api</code>.
        </p>
        <p>
            Mitt <a href="" target="_blank">git repo</a> är uppdaterat och innehåller en beskrivning av repot och hur det klolnas.
            Där finns även badges som länkar till Scrutinizer.
        </p>
        <p>
            Jag har skapat enhetstester för alla klasser som ingår i projektet, samt till viss del för de Controllers som används (dessa har jag dock
            ej testat fullt ut då det mesta som ingår redan finns testat i klasserna). I <code>phpunit.xml.dist</code> har jag excluderat vissa klasser
            som ej är relevanta för projektet. Phpunit och Scrutinizer ger mig en kodtäckning på ca 91% vilket jag anser får vara tillräckligt bra.
        </p>
        <p>
        All kod är kommenterad och dokumentation är skapad med phpdoc och jag har använt PhpMetric för att automattesta koden.
        </p>
        <h4>Krav 4 - JSON API</h4>
        Jag har skapat en sida <code>proj/api</code> där det finns samlat 5 st JSON routes som alla visar olika information om spelet.
        De första 4 är av metoden GET, och är egentligen väldigt. Den sista routen är en POST där man i en dropdown kan välja vilken typ av poängberäkning som
        ska visas för spelet, och däreftr får man se poäng för vald metod.
        Det var inga svårigheter att skapa dessa JSON routes då vi gjort samma sak flera gånger under kursen.

        <h4>Genomförande</h4>
        <p>Det har varit ett roligt och för mig inte så svårt projekt då jag valde att mest fokusera på de obligatoriska uppgifterna.
        Det har tagit mig gissningsvis ca 20 timmar att bli klar, och av dessa har nog en tredjedel gått åt till att skapa tester och fixa sådant som ger felmeddelanden av phpmd och phpstan.
        Nivån på projektet känns absolut rimligt, och jag önskar att jag hade haft tid för alla krav.

        </p>
        <p>Jag kunde återanvända flera av de klasser som redan implementerats under kursen (Card, CardGraphic och DeckOfCards). Jag skapade ett nytt namespace <code>PokerSquares</code> för projektet där
        jag lade till de nya klasser som behövdes. Dessa är <code>Grid</code> (spelplanen), <code>HandEvaluator</code> (beräknar poäng) och <code>Game</code> (spelmotorn).
        Jag har också lagt till två nya Controllers, <code>ProjectController</code> och <code>ProjectControllerApi</code>.
        </p>
        <p>
            Att skapa själva spelplanen och dess utseende gick ganska snabbt, medan poängberäkningen tog lite mer tid men var desto roligare att klura på.
            Vid starten av varje spelomgång får användaren ange sitt namn samt vilken poängberäknging som ska användas.
            Att namnet anges var egentligen med syfte att sedan göra krav 5 med databas, och spara spelstatistik. Men tyvärr blev tiden knapp och
            jag fick hoppa över det momentet.
        </p>

        <h4>Tankar om kursen</h4>
        <p>Alla kurser jag läst hittills från BTH har varit grymt bra och detta var inget undantag. Otroligt bra med inspelade föreläsningar
        för oss som jobbar dagtid. Jag upplever det också mycket bättre att läsa en distanskurs där det samtidigt finns "riktiga" kursstudenter. Annars kan det ofta bli rätt så avslaget
        och det känns som man är helt ensam i kursen.
        Instruktionerna på kurssidan är tydliga och det finns aldrig några tveksamheter om vad som ska göras och till när. Dessutom kunniga och engagerade lärare.
        Kursen kan jag verkligen rekommendera till kollegor och betyget från från mig är en 10:a.
        </p>
        </article>
    </article>


    </div>
    <div>
        <ul class="linkstyle">
            <li><a href="#kmom01">kmom01</a></li>
            <li><a href="#kmom02">kmom02</a></li>
            <li><a href="#kmom03">kmom03</a></li>
            <li><a href="#kmom04">kmom04</a></li>
            <li><a href="#kmom05">kmom05</a></li>
            <li><a href="#kmom06">kmom06</a></li>
            <li><a href="#kmom10">kmom07/10</a></li>
        </ul>
    </div>
</div>

{% endblock %}